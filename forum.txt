**** Chưa implement:
0, Vòng lặp đầu tiên không quăng ra lỗi

1, super -> TypeMisMatchInExpression(<error arg>) có thể rỗng.

2, int and float có thể chuyển kiểu ngầm định ở mọi trường hợp (func, arr, ...)

3, prototype chỉ lấy tên và danh sách đối số

4, Về việc đi qua thân hàm khi kế như thế nào thì chúng ta sẽ làm như sau:
 
+ Khi cha được khai báo trước ta sẽ là như bình thường đó là kiểm tra param của hàm cha như bình thường(ở đây redeclare hay undecl đều bắt kể cả tham số). 

+ Nếu hàm cha khai báo sau thì chúng ta kiểm tra sự tồn tại của hàm cha và kiểu khi ta gọi hàm super(). Nếu trường hợp hàm cha có 2 tham số cùng tên và cả 2 cùng inhert thì ta quăng lỗi redeclare ở đây.

+ Trường hợp khác thì ta làm như bình thường

5, Về vấn đề return ta sẽ có 2 TH như sau:

    + Return không nằm trong stmt nào cả. Thì ta chỉ xét kiểu với lần return đầu tiên. Các lần return sau đó ta không bàn đến kiểu nữa. Nhưng ta cũng phải quan tâm đến kiểu của các câu lệnh đằng sau nó.

    + Return nằm trong 1 stmt: ví dụ như nằm trong if và nằm ở ngoài. Thì ta sẽ buộc phải xét kiểu của 2 lần này. Có nghĩa là em nếu nó nằm trong stmt bắt buộc phải kiểm tra kiểu. Còn nếu nằm ngoài thì ta quan tâm lần return đầu tiên mà không quan tâm đến các return sau nó nữa. 

6, arr init có thể dùng với func (xét auto cho phần này)

7, Param có type là auto type.

8, sử dụng auto func trong bin, un expr

**** Những lưu ý:
1, Đề mô tả kiểu ntn thì phải tuân theo như thế.
2, Non-void return function không nhất thiết phải có return stmt.
3, Nếu vardecl khai báo kiểu mà k có init thì lúc sau có thể dùng để gán mà không gây ra lỗi trong bài này
4, Hàm dùng ở đâu trước thì phải suy diễn kiểu ở đó trước (theo thứ tự từ trên xuống dưới)


****** Cập nhật đến câu hỏi của Nguyễn Tấn Đạt 9/4/2023 *********
